Q：有两堆币，你要么去掉左边2个和右边1个，或者去掉左边1个右边2个，问你最后能否把两边都清空。
A：从直觉来看显然
一边是另一边的两倍肯定可以，即2 * n == m
一边是4一边是9肯定不行，即 2 * n < m
然后你会发现这种方法可以凑3和3，那么如果n == m 而且都是 3的倍数，比如3 3，6 6，9 9肯定可以
之后可以不断地两边减去3 3，最后肯定剩下如果是0 0，1 2，2 4就可以。这方法挺容易想到的。

更通用的想法应该是：
如果n < m：一开始应该尽可能地去用1 2去缩小n和m的差距。
每用一次，就可以使两边的差距减1，
如4 7变成3 5，
如果你最后把n和m的差距抹平了，
这时又正好是3的倍数，那就OK了。
显然，抹平他们需要(m - n)次。
也就是说n - (m - n) 还要能被3整除
即(2*n - m)%3==0
综合就是

if(2*n >= m && (2*n-m) % 3 == 0)  cout << "YES" << endl;
else cout << "NO" << endl;
